const { ethers } = require('ethers');
const {
    PrivateKey,
    ChainRestBankApi,
    getNetworkEndpoints
} = require('@injectivelabs/sdk-ts');
const { BigNumberInWei } = require('@injectivelabs/utils');
const { Network } = require('@injectivelabs/networks');

async function checkMasterWalletBalance() {
    try {
        console.log('üîç Ê£ÄÊü•‰∏ªË¥¶Êà∑‰ΩôÈ¢ù...');

        const masterPrivateKey = process.env.CONTRACT_PRIVATE_KEY || "adbac67afad51760f4049e3ce2c32fcf0cb630f62f9f011290bb87a975171f67";
        const network = Network.TestnetSentry;
        const endpoints = getNetworkEndpoints(network);

        // ‰ªéÁßÅÈí•ÁîüÊàêÂú∞ÂùÄ
        const privateKeyObj = PrivateKey.fromPrivateKey(masterPrivateKey);
        const publicKey = privateKeyObj.toPublicKey();
        const address = publicKey.toAddress();
        const injectiveAddress = address.toBech32();

        console.log(`‰∏ªÈí±ÂåÖÂú∞ÂùÄ: ${injectiveAddress}`);

        // Ëé∑Âèñ‰ΩôÈ¢ù
        const chainRestBankApi = new ChainRestBankApi(endpoints.rest);
        const balancesResponse = await chainRestBankApi.fetchBalances(injectiveAddress);

        // Êü•Êâæ INJ ‰ΩôÈ¢ù
        const injBalance = balancesResponse.balances.find(balance => balance.denom === 'inj');
        const balance = injBalance ? injBalance.amount : '0';

        const injBalanceFormatted = new BigNumberInWei(balance).toFixed(6);

        console.log(`‰∏ªÈí±ÂåÖ‰ΩôÈ¢ù: ${injBalanceFormatted} INJ`);

        if (parseFloat(injBalanceFormatted) < 1.0) {
            console.log('‚ö†Ô∏è ‰∏ªÈí±ÂåÖ‰ΩôÈ¢ù‰∏çË∂≥ÔºÅÈúÄË¶ÅËá≥Â∞ë 1 INJ Êù•ÂèëÈÄÅÂàùÂßãËµÑÈáë');
        } else {
            console.log('‚úÖ ‰∏ªÈí±ÂåÖ‰ΩôÈ¢ùÂÖÖË∂≥');
        }

    } catch (error) {
        console.error('‚ùå Ê£ÄÊü•‰ΩôÈ¢ùÂ§±Ë¥•:', error.message);
    }
}

checkMasterWalletBalance();
